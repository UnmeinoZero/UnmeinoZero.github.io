<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>面试题收集</title>
      <link href="/archives/c9f0b861.html"/>
      <url>/archives/c9f0b861.html</url>
      
        <content type="html"><![CDATA[<h2 id="spring-aop-的原理"><a href="#spring-aop-的原理" class="headerlink" title="spring aop 的原理"></a>spring aop 的原理</h2><p>Spring AOP 的实现原理是通过 <strong>动态代理</strong> 实现的。如果我们为 Spring 的某个 bean 配置了切面，那么 Spring 在创建这个 bean 的时候，实际上创建的是这个 bean 的一个代理对象，我们后续对 bean 中方法的调用，实际上调用的是代理类重写的代理方法 。</p><p><a href="https://www.cnblogs.com/tuyang1129/p/12878549.html">浅析Spring中AOP的实现原理——动态代理 - 特务依昂 - 博客园 (cnblogs.com)</a></p><br><h2 id="用户登录流程"><a href="#用户登录流程" class="headerlink" title="用户登录流程"></a>用户登录流程</h2><p>Java 项目中的用户登录流程一般分为以下几个步骤：</p><ol><li><p>客户端-登录界面（通常手机验证码登录）</p><ol><li>填写手机号</li><li>发送验证码</li><li>填写验证码</li><li>勾选新用户自动注册</li></ol></li><li><p>服务端-用户验证</p><ol><li><p>验证账号验证码是否正确</p></li><li><p>验证用户是否存在（不存在则初始化用户信息）</p></li><li><p>完成验证生成 token</p></li><li><p>将 token 返回给客户端</p><br></li></ol></li></ol><h2 id="MySQL-索引"><a href="#MySQL-索引" class="headerlink" title="MySQL 索引"></a>MySQL 索引</h2><p>索引是对数据库表中一列或多列的值进行排序的一种结构。MySQL索引的建立对于MySQL的高效运行是很重要的，索引可以大大提高MySQL的检索速度。但过多的使用索引将会造成滥用。因此索引也会有它的缺点：虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行增删改操作时，因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。建立索引会占用磁盘空间的索引文件。<a href="https://www.runoob.com/mysql/mysql-index.html">MySQL 索引 | 菜鸟教程 (runoob.com)</a></p><br><h2 id="springboot常用注解"><a href="#springboot常用注解" class="headerlink" title="springboot常用注解"></a>springboot常用注解</h2><p><strong>@SpringBootApplication</strong></p><p>​这个注解是Spring Boot最核心的注解，用在 Spring Boot的主类上，标识这是一个 Spring Boot 应用，用来开启 Spring Boot 的各项能力</p><p><strong>@Repository</strong></p><p>​用于标注数据访问组件，即DAO组件。这个注解修饰的DAO或者repositories类会被ComponetScan发现并配置，同时也不需要为它们提供XML配置项</p><p><strong>@Service</strong></p><p>​一般用于修饰service层的组件</p><p><strong>@RestController</strong></p><p>​用于标注控制层组件(如struts中的action)，表示这是个控制器bean,并且是将函数的返回值直 接填入HTTP响应体中,是REST风格的控制器；它是@Controller和@ResponseBody的合集。</p><p><strong>@Component</strong></p><p>​泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。</p><p><strong>@Bean</strong></p><p>​相当于XML中的,放在方法的上面，而不是类，意思是产生一个bean,并交给spring管理。</p><p><strong>@AutoWired</strong></p><p>​byType方式。把配置好的Bean拿来用，完成属性、方法的组装，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。</p><p>​当加上（required&#x3D;false）时，就算找不到bean也不报错。</p><p><strong>@ResponseBody</strong></p><p>​表示该方法的返回结果直接写入HTTP response body中一般在异步获取数据时使用，在使用@RequestMapping后，返回值通常解析为跳转路径，加上@responsebody后返回结果不会被解析为跳转路径，而是直接写入HTTPresponsebody中。比如异步获取json数据，加上@responsebody后，会直接返回json数据。</p><p><strong>@RequestMapping</strong></p><p>​RequestMapping是一个用来处理请求地址映射的注解；提供路由信息，负责URL到Controller中的具体函数的映射，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</p><p><strong>@RequestParam</strong></p><p>​用在方法的参数前面。例： @RequestParam String a &#x3D;request.getParameter(“a”)。</p><p><strong>@PathVariable</strong></p><p>​路径变量。参数与大括号里的名字一样要相同。例：</p><p>​RequestMapping(“user&#x2F;get&#x2F;mac&#x2F;{macAddress}”)</p><p>​public String getByMacAddress(@PathVariable String macAddress){</p><p>　　&#x2F;&#x2F;do something;</p><p>​}</p><p><a href="https://blog.csdn.net/NaXieNianWoMenYiQ/article/details/109901541">SpringBoot常用注解及其作用_小菜鸡_的博客-CSDN博客</a></p><br><h2 id="常用的微服务组件"><a href="#常用的微服务组件" class="headerlink" title="常用的微服务组件"></a>常用的微服务组件</h2><p>微服务架构中常用的组件包括：</p><p>注册中心：Eureka、Zookeeper、Consul 等</p><p>服务网关：Zuul、Spring Cloud Gateway 等</p><p>负载均衡：Ribbon、Nginx 等</p><p>服务调用：Feign、RestTemplate 等</p><p>熔断器：Hystrix、Sentinel 等</p><br><h2 id="redis常用数据类型"><a href="#redis常用数据类型" class="headerlink" title="redis常用数据类型"></a>redis常用数据类型</h2><p>Redis常用的数据类型有：</p><ol><li><p>String（字符串）：最基本的数据类型，一个 key 对应一个 value。</p></li><li><p>Hash（哈希）：适合存储对象，每个 hash 可以存储多个键值对。</p></li><li><p>List（列表）：适合存储列表数据，支持从两端添加元素。</p></li><li><p>Set（集合）：适合存储无序的、不重复的元素集合。</p></li><li><p>ZSet（有序集合）：适合存储有序的、不重复的元素集合。</p><p><a href="https://zhuanlan.zhihu.com/p/516045857">Redis常用的数据类型及其使用场景 - 知乎 (zhihu.com)</a></p><br></li></ol><h2 id="乐观锁和悲观锁的概念，在项目中如何使用的"><a href="#乐观锁和悲观锁的概念，在项目中如何使用的" class="headerlink" title="乐观锁和悲观锁的概念，在项目中如何使用的"></a>乐观锁和悲观锁的概念，在项目中如何使用的</h2><p>乐观锁和悲观锁是两种并发控制的思想，用于解决并发场景下的数据竞争问题。悲观锁认为数据在被访问时会被其他线程修改，因此在访问数据时会先加锁，防止其他线程修改数据。乐观锁则认为数据在被访问时不会被其他线程修改，因此不会加锁，而是在更新数据时判断数据是否被其他线程修改过，如果没有则更新成功，否则更新失败。</p><p>在项目中，乐观锁和悲观锁的使用需要根据具体情况而定。一般来说，如果并发量较大，且对数据的一致性要求较高，则可以使用悲观锁；如果并发量较小，且对数据的一致性要求不高，则可以使用乐观锁。</p><p><a href="https://www.cnblogs.com/kyoner/p/11318979.html">数据库中的乐观锁与悲观锁 - murphy_gb - 博客园 (cnblogs.com)</a></p><br><h2 id="Easyexcel如何导出数据的"><a href="#Easyexcel如何导出数据的" class="headerlink" title="Easyexcel如何导出数据的"></a>Easyexcel如何导出数据的</h2><p><a href="https://blog.csdn.net/CoolDDD/article/details/127050790">使用easyexcel快速导出xlsx表格（简洁、高效、易懂）_菜鸟小邓的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/u013044713/article/details/120249233">EasyExcel实现Excel文件导入导出_easyexcel导出excel_crysw的博客-CSDN博客</a></p><br><h2 id="对spring的理解"><a href="#对spring的理解" class="headerlink" title="对spring的理解"></a>对spring的理解</h2><p>Spring是一个轻量级的IoC和AOP容器框架。是为Java应用程序提供基础性服务的一套框架，目的是用于简化企业应用程序的开发，它使得开发者只需要关心业务需求。常见的配置方式有三种：基于XML的配置、基于注解的配置、基于Java的配置。</p><p><a href="http://www.sunpinewater.tech/mydocs/%E5%91%A8%E6%9C%88%E6%B5%8B%E8%AF%95/20230412-spring%E6%B5%8B%E8%AF%95/spring%E6%B5%8B%E8%AF%95.html">spring相关</a></p><br><h2 id="mybatis和mybatis-plus的区别"><a href="#mybatis和mybatis-plus的区别" class="headerlink" title="mybatis和mybatis-plus的区别"></a>mybatis和mybatis-plus的区别</h2><p>Mybatis和Mybatis-Plus的区别在于Mybatis-Plus是Mybatis的增强工具，它在不改变Mybatis的基础上进行了增强。使用Mybatis-Plus后，我们可以正常使用Mybatis的原生功能和Mybatis-Plus的独特功能。</p><br><h2 id="git-提了很多错误的文件怎么办"><a href="#git-提了很多错误的文件怎么办" class="headerlink" title="git 提了很多错误的文件怎么办"></a>git 提了很多错误的文件怎么办</h2><ul><li><p>git status：查看add中的文件</p></li><li><p>git reset HEAD：撤销add操作，如果后面什么都不跟的话，就是上一次add里面的全部撤销了</p></li><li><p>git reset HEAD XXX&#x2F;XXX&#x2F;XXX.java：对某个文件进行撤销</p><br></li><li><p>git log：查看文件历史版本</p></li><li><p>git checkout <commitId> <filename>：回滚到指定commitId</p></li><li><p>git commit -m ‘回滚特定文件的变动’：提交被修改的文件</p></li><li><p>git push：推送</p><p><a href="https://blog.csdn.net/qq_34997906/article/details/82997856">撤销git的错误提交(git add ， git commit， git push)_弦上的梦的博客-CSDN博客</a></p><br></li></ul><h2 id="linux常见命令"><a href="#linux常见命令" class="headerlink" title="linux常见命令"></a>linux常见命令</h2><ul><li><p>ls：列出目录中的文件和子目录。</p></li><li><p>cd：更改当前目录。</p></li><li><p>pwd：显示当前工作目录的名称。</p></li><li><p>mkdir：创建一个新目录。</p></li><li><p>rmdir：删除一个空目录。</p></li><li><p>cp：复制文件和目录。</p></li><li><p>rm：删除文件和目录。</p></li><li><p>mv：移动文件和目录或重命名文件。</p></li><li><p>more：逐页显示文件内容。</p></li><li><p>grep：在文件中查找字符串。</p></li><li><p>find：在指定目录中查找文件。</p></li><li><p>vim：文本编辑器</p><p><a href="https://zhuanlan.zhihu.com/p/420247468">40个最常用的Linux命令行大全 - 知乎 (zhihu.com)</a></p><br></li></ul><h2 id="vue生命周期"><a href="#vue生命周期" class="headerlink" title="vue生命周期"></a>vue生命周期</h2><p>Vue的生命周期是Vue实例从创建到销毁的全过程。在这个过程中，Vue提供了一些钩子函数，让我们在特定的阶段添加自己的代码。这些钩子函数包括：</p><ul><li><p>beforeCreate：在实例初始化之后立即调用。</p></li><li><p>created：实例创建完成后调用。</p></li><li><p>beforeMount：在挂载之前调用。</p></li><li><p>mounted：实例挂载后调用。</p></li><li><p>beforeUpdate：在数据更新之前调用。</p></li><li><p>updated：在数据更新之后调用。</p></li><li><p>beforeDestroy：在实例销毁之前调用。</p></li><li><p>destroyed：在实例销毁之后调用。</p><br></li></ul><h2 id="现在项目的主流框架"><a href="#现在项目的主流框架" class="headerlink" title="现在项目的主流框架"></a>现在项目的主流框架</h2><p>SpringBoot，Spring，SpringMVC，mybatis，Vue</p><p><a href="https://www.zhihu.com/question/307745171">Java开发主流框架是什么？ - 知乎 (zhihu.com)</a></p><br><h2 id="前后端交互的执行流程"><a href="#前后端交互的执行流程" class="headerlink" title="前后端交互的执行流程"></a>前后端交互的执行流程</h2><p>通常，前后端之间的交互是通过HTTP协议进行的。当用户在前端进行操作时，比如点击一个按钮或填写一个表单，前端会将这些操作转换成HTTP请求，然后发送到后端。后端收到请求后，会根据请求的内容进行相应的处理，比如查询数据库或生成一个PDF文件等等。最后，后端会将处理结果转换成HTTP响应并返回给前端。</p><br><h2 id="你项目中有用map吗，说下map取value的方式"><a href="#你项目中有用map吗，说下map取value的方式" class="headerlink" title="你项目中有用map吗，说下map取value的方式"></a>你项目中有用map吗，说下map取value的方式</h2><p>通过values方法获取value集合，也可以通过get方法填入key，获得对应的value</p><p><a href="https://blog.csdn.net/weixin_41814716/article/details/100058410">Java HashMap获取值的几种方式_hashmap获取value集合_Brett-Xu的博客-CSDN博客</a></p><br><h2 id="MyBatis的SQL语句写在哪"><a href="#MyBatis的SQL语句写在哪" class="headerlink" title="MyBatis的SQL语句写在哪"></a>MyBatis的SQL语句写在哪</h2><p>MyBatis的SQL语句可以基于注解的方式写在类方法上面，也能以xml的方式写到xml文件中，如果使用的是xml文件，可以在mapper文件中配置SQL</p><p><a href="https://blog.csdn.net/chuixue24/article/details/103936410">mybatis中写sql的三种方式_mybatis写sql_chuixue24的博客-CSDN博客</a></p><br><h2 id="你项目负责的模块用了哪些表"><a href="#你项目负责的模块用了哪些表" class="headerlink" title="你项目负责的模块用了哪些表"></a>你项目负责的模块用了哪些表</h2><p>员工表，用户表，菜品表，菜品口味表，菜品分类表，套餐表，套餐和菜品关系表，订单表，订单明细表，地址簿表，购物车表</p><br><h2 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h2><p>SQL优化是提高数据库性能的重要手段。SQL优化的方法有很多，以下是一些常见的方法：</p><ul><li>避免 SELECT *，只查询需要的字段。</li><li>小表驱动大表，即小的数据集驱动大的数据集。</li><li>当B表的数据集比A表小时，用in优化 exist两表执行顺序是先查B表再查A表查询语句：SELECT * FROM tb_dept WHERE id in (SELECT id FROM tb_dept) ; 4 当A表的数据集比B表小时，用exist优化in ，两表执行顺序是先查A表，再查B表，查询语句：SELECT * FROM A WHERE EXISTS (SELECT id FROM B WHERE a.id&#x3D;b.id) ;</li><li>尽量使用连接代替子查询，因为使用 join 时，MySQL 不会在内存中创建临时表。</li><li>对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</li><li>应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描。</li></ul><br><h2 id="左连接和右连接的区别"><a href="#左连接和右连接的区别" class="headerlink" title="左连接和右连接的区别"></a>左连接和右连接的区别</h2><p>左连接和右连接都是连接查询的一种，它们的区别在于连接的基础表不同。左连接的基础表为左侧数据表，右连接的基础表为右侧数据表。左连接返回包括左表中的所有记录和右表中连接字段相等的记录，而右连接返回包括右表中的所有记录和左表中连接字段相等的记录。</p><p><a href="https://www.php.cn/sql/455417.html">左连接、右连接、内连接、全外连接的区别是什么？-SQL-PHP中文网</a></p><br><h2 id="从表字段为空，后端获取数据将会怎样"><a href="#从表字段为空，后端获取数据将会怎样" class="headerlink" title="从表字段为空，后端获取数据将会怎样"></a>从表字段为空，后端获取数据将会怎样</h2><p>后端获取数据将会返回空值或者null值</p><br><h2 id="Java的三大特性举例"><a href="#Java的三大特性举例" class="headerlink" title="Java的三大特性举例"></a>Java的三大特性举例</h2><p>Java的三大特性是：封装、继承和多态</p><p>例如，一个人可以是学生、老师或者工人。他们都有姓名、年龄等属性，但是他们的行为和职责不同。学生需要上课、考试，老师需要教书、批改作业，工人需要生产产品等。</p><br><h2 id="垃圾回收机制，其在内存管理的重要性"><a href="#垃圾回收机制，其在内存管理的重要性" class="headerlink" title="垃圾回收机制，其在内存管理的重要性"></a>垃圾回收机制，其在内存管理的重要性</h2><p>垃圾回收机制是一种自动的内存管理机制，它可以自动地释放不再使用的内存空间，从而避免了内存泄漏的问题。Java中的垃圾回收机制是由Java虚拟机（JVM）来实现的。垃圾回收机制的重要性在于它可以自动地释放不再使用的内存空间，从而避免了内存泄漏的问题。</p><br><h2 id="闭包，举例"><a href="#闭包，举例" class="headerlink" title="闭包，举例"></a>闭包，举例</h2><p>闭包是指有权访问另一个函数作用域中的变量的函数。闭包可以缓存上级作用域，使得函数外部打破了“函数作用域”的束缚，可以访问函数内部的变量。</p><p>以下是一个典型的闭包例子：foo函数实例化后，返回getName函数，赋值给window.action，action一直存在内存中，直到关闭页面。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&quot;Bing&quot;</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> getName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> action = <span class="title function_">foo</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">action</span>()); <span class="comment">// Bing</span></span><br></pre></td></tr></table></figure><br><h2 id="用js写一个倒三角的页面布局"><a href="#用js写一个倒三角的页面布局" class="headerlink" title="用js写一个倒三角的页面布局"></a>用js写一个倒三角的页面布局</h2><p>使用CSS实现</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.triangle</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-left</span>: <span class="number">50px</span> solid transparent;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-right</span>: <span class="number">50px</span> solid transparent;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-top</span>: <span class="number">100px</span> solid red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br><h2 id="有一组括号字符串，判断是否合法"><a href="#有一组括号字符串，判断是否合法" class="headerlink" title="有一组括号字符串，判断是否合法"></a>有一组括号字符串，判断是否合法</h2><p>在这个代码示例中，我们使用了一个栈来存储左括号。当遇到右括号时，我们将栈顶元素弹出并判断是否匹配。如果匹配，则继续遍历字符串；如果不匹配，则说明该字符串不合法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    Stack&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span> || c == <span class="string">&#x27;[&#x27;</span> || c == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">            stack.push(c);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stack.isEmpty() || c != getPair(stack.pop())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">char</span> <span class="title function_">getPair</span><span class="params">(<span class="type">char</span> c)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://zhuanlan.zhihu.com/p/409586225">https://zhuanlan.zhihu.com/p/409586225</a></p><br><h2 id="servlet的生命周期"><a href="#servlet的生命周期" class="headerlink" title="servlet的生命周期"></a>servlet的生命周期</h2><p>Servlet的生命周期可以分为四个阶段，即装载类及创建实例阶段、初始化阶段、服务阶段和实例销毁阶段。</p><ul><li><p>装载类及创建实例阶段：当客户端第一次请求某个Servlet时，Servlet容器会检查是否已经装载了该Servlet类，如果没有，则装载该类并创建一个Servlet实例。</p></li><li><p>初始化阶段：在Servlet实例被创建后，Servlet容器会调用该实例的init()方法进行初始化。在这个方法中，可以执行一些初始化操作，如读取配置文件等。</p></li><li><p>服务阶段：在初始化完成后，Servlet容器会调用该实例的service()方法来响应客户端的请求。在这个方法中，可以执行一些业务逻辑操作，如查询数据库等。</p></li><li><p>实例销毁阶段：当Servlet容器关闭或者检测到某个Servlet实例长时间没有被使用时，会调用该实例的destroy()方法进行销毁。在这个方法中，可以执行一些清理操作，如关闭数据库连接等。</p><p><a href="https://www.php.cn/java-article-413482.html">Servlet的生命周期有哪几个阶段-java教程-PHP中文网</a></p><br></li></ul><h2 id="redis的缓存击穿和缓存穿透，基础数据类型，哨兵模式"><a href="#redis的缓存击穿和缓存穿透，基础数据类型，哨兵模式" class="headerlink" title="redis的缓存击穿和缓存穿透，基础数据类型，哨兵模式"></a>redis的缓存击穿和缓存穿透，基础数据类型，哨兵模式</h2><ul><li><p>缓存穿透是指查询一个一定不存在的数据，由于缓存不命中，就会去查询数据库，这样可能会对数据库造成压力。解决方案可以使用布隆过滤器或者缓存空对象。</p></li><li><p>缓存击穿是指一个存在的key，在高并发访问下突然失效，此时大量的请求会穿透到数据库，造成数据库瞬间压力过大。解决方案可以使用互斥锁或者设置热点数据永不过期。</p></li><li><p>缓存雪崩是指在某一个时间段，缓存集中过期失效。此时，大量的请求会穿透到数据库，造成数据库瞬间压力过大。解决方案可以使用多级缓存或者设置不同的过期时间</p></li><li><p>[哨兵模式是Redis高可用性的一种解决方案。哨兵模式通过监控Redis主从节点的状态，当主节点宕机时自动将从节点切换为主节点，从而实现Redis的高可用性。</p><p><a href="https://zhuanlan.zhihu.com/p/335353729">牛逼，三句话搞懂 Redis 缓存穿透、击穿、雪崩！ - 知乎 (zhihu.com)</a></p><br></li></ul><h2 id="你熟悉的设计模式，说说代理模式"><a href="#你熟悉的设计模式，说说代理模式" class="headerlink" title="你熟悉的设计模式，说说代理模式"></a>你熟悉的设计模式，说说代理模式</h2><p>代理模式是常用的java设计模式，他的特征是代理类与委托类有同样的接口，代理类主要负责为委托类预处理消息、过滤消息、把消息转发给委托类，以及事后处理消息等。代理类与委托类之间通常会存在关联关系，一个代理类的对象与一个委托类的对象关联，代理类的对象本身并不真正实现服务，而是通过调用委托类的对象的相关方法，来提供特定的服务。简单的说就是，我们在访问实际对象时，是通过代理对象来访问的，代理模式就是在访问实际对象时引入一定程度的间接性，因为这种间接性，可以附加多种用途。</p><p><a href="https://blog.csdn.net/Passer_hua/article/details/122617628">【Java】代理模式（Proxy模式）详解_java proxy_果壳~的博客-CSDN博客</a></p><br><h2 id="了解过vue3吗"><a href="#了解过vue3吗" class="headerlink" title="了解过vue3吗"></a>了解过vue3吗</h2><p>vue3是Vue框架最新版本</p><br><h2 id="nacos配置中心的原理"><a href="#nacos配置中心的原理" class="headerlink" title="nacos配置中心的原理"></a>nacos配置中心的原理</h2><p>Nacos的配置中心原理是将配置信息存储在Nacos服务器上，然后客户端从服务器上获取配置信息。当配置信息发生更改时，Nacos服务器会通知客户端更新其本地缓存。</p><br><h2 id="说说jwt"><a href="#说说jwt" class="headerlink" title="说说jwt"></a>说说jwt</h2><p>JWT全称是JSON Web Token。定义了一种简洁的、自包含的格式，用于在通信双方以json数据格式安全的传输信息。由于数字签名的存在,这些信息是可靠的。</p><br><h2 id="RestController和-Controller"><a href="#RestController和-Controller" class="headerlink" title="@RestController和@Controller"></a>@RestController和@Controller</h2><p>@RestController 在 Spring MVC 中就是 @Controller 和 @ResponseBody 注解的集合。@RestController 注解是从 Spring 4.0 版本开始添加进来的，主要用于更加方便的构建 RESTful Web 服务。二者区别： @RestController无法返回指定页面，而@Controller可以；前者可以直接返回数据，后者需要@ResponseBody辅助。</p><br><h2 id="树形结构转成一维数组（选js、vue、java实现）"><a href="#树形结构转成一维数组（选js、vue、java实现）" class="headerlink" title="树形结构转成一维数组（选js、vue、java实现）"></a>树形结构转成一维数组（选js、vue、java实现）</h2><p><a href="https://juejin.cn/post/7037078362417791007">树结构、扁平化数组相互转换 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/6958741343166267422">树形结构(多维数组)和一维数组的相互转化 - 掘金 (juejin.cn)</a></p><br><h2 id="ThreadLocal是什么，使用场景"><a href="#ThreadLocal是什么，使用场景" class="headerlink" title="ThreadLocal是什么，使用场景"></a>ThreadLocal是什么，使用场景</h2><p>ThreadLocal是Java中的一个类，它提供了一种线程本地存储的机制，可以在每个线程中创建一个 ThreadLocalMap 对象，每个线程可以访问自己内部 ThreadLocalMap 对象内的 value。ThreadLocal 通常被用来解决多线程并发访问时的数据安全问题，因为它提供了一种线程隔离的方式，保证了每个线程的数据互不干扰。</p><p>经典的使用场景是为每个线程分配一个 JDBC 连接 Connection，这样可以避免多个线程之间共享同一个 Connection 对象而导致的数据安全问题。</p><p><a href="https://blog.csdn.net/meism5/article/details/90413860">ThreadLocal 是什么？有哪些使用场景？_threadlocal是什么_ConstXiong的博客-CSDN博客</a></p><br><h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2><p>工作流（Workflow），是指业务过程的部分或整体在计算机应用环境下的自动化，是对工作流程及其各操作步骤之间业务规则的抽象、概括描述。工作流建模，即将工作流程中的工作如何前后组织在一起的逻辑和规则，在计算机中以恰当的模型表达并对其实施计算。</p><p><a href="https://zhuanlan.zhihu.com/p/333266219">什么是工作流？工作流有什么作用？怎样配置工作流程？ - 知乎 (zhihu.com)</a></p><br><h2 id="tcp-x2F-udp"><a href="#tcp-x2F-udp" class="headerlink" title="tcp&#x2F;udp"></a>tcp&#x2F;udp</h2><p>TCP（Transmission Control Protocol）和UDP（User Datagram Protocol）都是互联网协议中的传输层协议。TCP提供了一种有序、可靠、面向连接的数据传输服务，而UDP则提供了一种无序、不可靠、无连接的数据传输服务。</p><ul><li>TCP是面向连接的，它在传输数据之前需要先建立连接，然后才能进行数据传输。TCP提供了可靠的数据传输服务，它会对数据进行分段、排序、重传等操作，以保证数据的完整性和正确性。TCP适用于对数据传输质量要求较高的场景，如文件传输、电子邮件等。</li><li>UDP是无连接的，它不需要建立连接就可以进行数据传输。UDP提供了不可靠的数据传输服务，它不会对数据进行分段、排序、重传等操作，因此可能会出现丢包或乱序等问题。UDP适用于对数据传输质量要求不高的场景，如实时音视频传输、网络游戏等。</li></ul><br><h2 id="重写是什么？重载是什么？使用场景"><a href="#重写是什么？重载是什么？使用场景" class="headerlink" title="重写是什么？重载是什么？使用场景"></a>重写是什么？重载是什么？使用场景</h2><p>子类继承父类，子类重写父类中的所有公共方法，覆盖父类的方法并对其重写。</p><ul><li>重载是多态性的一种表现。重载是指在一个类中定义了多个同名的方法，但他们的参数列表是不同的，也就是说有不同的参数个数或有不同类型的参数类型。</li><li>重写时子类继承父类的方法，涉及到两个类；重载是同一个类方法之间的关系，只是参数或者参数类型不同，在一个类中。</li></ul><p>区别：重写的参数列表相同，重载的参数列表不同。</p><p>使用场景：在类中，要以统一的方式处理不同类型数据的时候，可以用重载。重载是多样性，是多态类型的演示，不修改原方法及源代码的基础上对方法进行扩展或增强时，使用重写。</p><br><h2 id="有两个桶，一个3L水的，一个5L水的，怎么精确拿到4L的水"><a href="#有两个桶，一个3L水的，一个5L水的，怎么精确拿到4L的水" class="headerlink" title="有两个桶，一个3L水的，一个5L水的，怎么精确拿到4L的水"></a>有两个桶，一个3L水的，一个5L水的，怎么精确拿到4L的水</h2><p>先把3升的水桶装满，倒入5升的水桶里，此时5升的水桶里有3升水。再把3升的水桶装满，往5升的水桶里倒，5升的满了以后，此时3升的水桶里还剩1升。把5升桶里的水倒掉，刚才3升桶里省下的1升倒进去。再灌满3升的，再倒进5升桶里去，就是4升了。</p><br><h2 id="和-的区别？"><a href="#和-的区别？" class="headerlink" title="#{}和${}的区别？"></a>#{}和${}的区别？</h2><p>在Mybatis中，#{}和${}都是用来接收参数的，但是它们的区别在于：</p><ul><li><p>#{}是预编译处理，$ {} 是字符串替换。</p></li><li><p>MyBatis在处理 # {} 时，会将 SQL 中的 # {} 替换为?，然后使用 PreparedStatement 的 set 方法设置参数。这样可以防止 SQL 注入攻击。而 $ {} 则是直接进行字符串替换，所以不能防止 SQL 注入攻击。</p><p><a href="https://www.cnblogs.com/liaowenhui/p/12217959.html">#{}和${}的区别是什么？ - JustJavaIt - 博客园 (cnblogs.com)</a></p><br></li></ul><h2 id="x3D-x3D-和-equals"><a href="#x3D-x3D-和-equals" class="headerlink" title="&#x3D;&#x3D; 和 equals"></a>&#x3D;&#x3D; 和 equals</h2><p>在Java中，&#x3D;&#x3D;和equals()都是用来比较两个对象是否相等的，但是它们的区别在于：</p><ul><li><p>&#x3D;&#x3D;比较的是变量（栈）内存中存放的对象的（堆）内存地址，用来判断两个对象的地址是否相同，即是否是指向同一个对象。</p></li><li><p>equals()方法用来比较两个对象的内容是否相等。</p><p><a href="https://blog.csdn.net/meism5/article/details/89029475">&#x3D;&#x3D; 和 equals 的区别_equals和&#x3D;&#x3D;的区别_ConstXiong的博客-CSDN博客</a></p><br></li></ul><h2 id="怎么做热搜榜"><a href="#怎么做热搜榜" class="headerlink" title="怎么做热搜榜"></a>怎么做热搜榜</h2><p><a href="https://juejin.cn/post/7102023823645474852">热度排行榜实现方案（java基于LRU算法的实现方式） - 掘金 (juejin.cn)</a></p><br><h2 id="select-select-优化"><a href="#select-select-优化" class="headerlink" title="select * (select *)优化"></a>select * (select *)优化</h2><p>SELECT * 语句会导致不必要的网络开销和时间浪费，因为它会返回表中的所有列,如果您只需要表中的一部分列，则应该明确地指定这些列。这将减少网络开销和时间浪费，并且可以提高查询速度。</p><br><h2 id="hashmap底层链表什么情况转红黑树"><a href="#hashmap底层链表什么情况转红黑树" class="headerlink" title="hashmap底层链表什么情况转红黑树"></a>hashmap底层链表什么情况转红黑树</h2><ol><li><p>HashMap底层维护了Node类型的数组table,默认为null。</p></li><li><p>当创建对象时，将加载因子(loadfactor)初始化为0.75。</p></li><li><p>当添加key-val时，通过key的哈希值得到在table的索引。然后判断该索引处是否有元素，如果没有元素直接添加。如果该索引处有元素，继续判断该元素的key和准备加入的key相是否等，如果相等，则直接替换val;如果不相等需要判断是树结构还是链表结构，做出相应处理。如果添加时发现容量不够，则需要扩容。</p></li><li><p>第1次添加，则需要扩容table容量为16,临界值(threshold)为12 (16*0.75)</p></li><li><p>以后再扩容，则需要扩容table容量为原来的2倍(32),临界值为原来的2倍,即24,依次类推。</p></li><li><p>在Java8中，如果一条链表的元素个数超过 TREEIFY THRESHOLD(默认是8),并且中table的大小&gt;&#x3D; MIN TREEIFY CAPACITY(默认64),就会进行树化(红黑树)</p><br></li></ol><h2 id="new-string-a-new-string-b-有几个对象"><a href="#new-string-a-new-string-b-有几个对象" class="headerlink" title="new string a + new string b 有几个对象"></a>new string a + new string b 有几个对象</h2><p>3个；在Java中，使用“+”运算符连接两个字符串时，会创建一个新的字符串对象。</p><br><h2 id="数据库索引类型"><a href="#数据库索引类型" class="headerlink" title="数据库索引类型"></a>数据库索引类型</h2><p>数据库索引是一种数据结构，它可以帮助数据库系统快速查找表中的数据。在数据库中，有许多不同类型的索引，包括：</p><ul><li><p>B+树索引</p></li><li><p>哈希索引</p></li><li><p>空间索引（例如 R-树）</p></li><li><p>全文索引</p></li><li><p>Bitmap索引</p><p><a href="https://blog.csdn.net/qq_41793064/article/details/108697472">数据库的五种索引类型_数据库索引有哪几种类型_阿文_ing的博客-CSDN博客</a></p><br></li></ul><h2 id="spring4和spring5的了解"><a href="#spring4和spring5的了解" class="headerlink" title="spring4和spring5的了解"></a>spring4和spring5的了解</h2><p>Spring4.x和Spring 5.x都是Spring Framework的版本，其中Spring 5.x是Spring Framework的最新版本。</p><p>Spring 5.x相对于Spring 4.x来说，有以下一些改进：</p><ul><li><p>支持Java 8及以上版本</p></li><li><p>支持Reactive编程模型</p></li><li><p>支持函数式编程模型</p></li><li><p>支持WebFlux框架</p><p><a href="https://blog.csdn.net/wufagang/article/details/119985678">spring5和spring4 日志新特性_spring4和spring5区别_吴法刚的博客-CSDN博客</a></p><br></li></ul><h2 id="synchronized的用法"><a href="#synchronized的用法" class="headerlink" title="synchronized的用法"></a>synchronized的用法</h2><p>synchronized是Java中的关键字，是一种同步锁。它修饰的对象有以下几种：</p><ul><li><p>修饰一个代码块，被修饰的代码块称为同步语句块，其作用的范围是大括号 {}括起来的代码，作用的对象是调用这个代码块的对象；</p></li><li><p>修饰一个方法，被修饰的方法称为同步方法，其作用的对象是调用这个方法的对象；</p></li><li><p>修饰一个静态方法，其作用的对象是这个类的所有对象；</p></li><li><p>修饰一个类，其作用的对象是这个类的所有对象。</p><p><a href="https://zhuanlan.zhihu.com/p/435839659">synchronized关键字详解 - 知乎 (zhihu.com)</a></p><br></li></ul><h2 id="Get-Post的区别"><a href="#Get-Post的区别" class="headerlink" title="Get Post的区别"></a>Get Post的区别</h2><p>[HTTP协议中，GET和POST是两种常见的请求方法。它们的主要区别如下：</p><ol><li><p>GET用于从服务器上获取数据，而POST用于向服务器上传递数据。</p></li><li><p>GET请求的数据会附在URL之后（就是把数据放置在HTTP协议头中），而POST则是把提交的数据放置在HTTP协议包的实体中。</p></li><li><p>GET提交的数据大小有限制（因为浏览器对URL长度有限制），而POST方法提交的数据没有限制。</p></li><li><p>GET方式提交数据，会带来安全问题，比如一个登录页面，通过GET方式提交用户名和密码，在服务器端会将用户名和密码记录在日志文件中，而日志文件可以通过某些途径被窃取，从而导致账号被盗。而POST方式提交数据，则不会出现这种情况。</p><p><a href="https://www.runoob.com/tags/html-httpmethods.html">HTTP 方法：GET 对比 POST | 菜鸟教程 (runoob.com)</a></p><br></li></ol><h2 id="接口和抽象类的区别"><a href="#接口和抽象类的区别" class="headerlink" title="接口和抽象类的区别"></a>接口和抽象类的区别</h2><p>抽象类和接口是Java中两种常见的抽象类型。它们的主要区别如下：</p><ol><li><p>抽象类是对一种事物的抽象，即对类抽象，而接口是对行为的抽象。 抽象类是对整个类整体进行抽象，包括属性、行为，但是接口却是对类局部（行为）进行抽象。</p></li><li><p>抽象类可以提供成员方法的实现细节，而接口中只能存在public abstract方法。</p></li><li><p>抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是public static final类型的。</p></li><li><p>接口中不能含有静态代码块以及静态方法，而抽象类可以有静态代码块和静态方法。</p></li><li><p>一个类只能继承一个抽象类，而一个类却可以实现多个接口。</p><p><a href="https://blog.csdn.net/weixin_43912621/article/details/105576720">java：简述抽象类和接口的区别_fakerth的博客-CSDN博客</a></p><br></li></ol><h2 id="静态嵌套类和内部类的区别"><a href="#静态嵌套类和内部类的区别" class="headerlink" title="静态嵌套类和内部类的区别"></a>静态嵌套类和内部类的区别</h2><p>静态嵌套类和内部类都是Java中的嵌套类。它们的主要区别如下：</p><ol><li><p>静态嵌套类是一个静态类，而内部类是一个非静态类。</p></li><li><p>静态嵌套类不能访问外部类的非静态成员，而内部类可以访问外部类的所有成员。</p></li><li><p>静态嵌套类的实例化对象不能绑定外围类的实例化对象，而内部类的实例化对象需要绑定一个外围类的实例化对象。</p></li><li><p>静态嵌套类可以直接通过外部类名访问，而内部类需要通过外部类的实例化对象来访问。</p><p><a href="https://blog.csdn.net/wt520it/article/details/82986550">内部类(inner Class)和嵌套类(Static Nested Class)之间的区别？_内部类、嵌套类的语法和使用以及二者的差别_wt520it的博客-CSDN博客</a></p><br></li></ol><h2 id="静态变量和实例变量的区别"><a href="#静态变量和实例变量的区别" class="headerlink" title="静态变量和实例变量的区别"></a>静态变量和实例变量的区别</h2><p>静态变量和实例变量都是Java中的变量。它们的主要区别如下：</p><ol><li><p>静态变量是与类相关的变量，所有对象共享一个副本，而实例变量是与对象相关的变量，每个对象都有自己的副本。</p></li><li><p>静态变量在类中使用static关键字修饰，而实例变量则不需要。</p></li><li><p>静态变量在Java启动时就一直常驻内存，可以直接通过类名调用，而实例变量需要new该类才能被调用。</p></li><li><p>静态变量可以在没有创建任何对象的情况下进行访问，而实例变量必须在创建对象后才能访问。</p><p><a href="https://blog.csdn.net/hjq_ku/article/details/122452611">静态变量和实例变量的区别_静态变量和实例变量的区别?_韩金群的博客-CSDN博客</a></p><br></li></ol><h2 id="简单介绍一下Ajax"><a href="#简单介绍一下Ajax" class="headerlink" title="简单介绍一下Ajax"></a>简单介绍一下Ajax</h2><p>它是异步的JavaScript和XML。使用Ajax，可以在不重新加载整个网页的情况下，对网页的某部分进行更新。Ajax通过在后台与服务器进行少量数据交换，可以使网页实现异步更新</p><p><a href="https://www.runoob.com/ajax/ajax-intro.html">AJAX 简介 | 菜鸟教程 (runoob.com)</a></p><br><h2 id="装箱和拆箱"><a href="#装箱和拆箱" class="headerlink" title="装箱和拆箱"></a>装箱和拆箱</h2><p>在Java中，装箱和拆箱是指将基本数据类型转换为对应的包装器类型和将包装器类型转换为对应的基本数据类型的过程。有了装箱和拆箱，Java可以根据上下文，自动进行转换，极大地简化相关编程。</p><p><a href="https://blog.csdn.net/w372426096/article/details/81909792">Java中的装箱和拆箱—这一篇全了解_java的装箱和拆箱_Franco蜡笔小强的博客-CSDN博客</a></p><br><h2 id="Sleep和wait的区别"><a href="#Sleep和wait的区别" class="headerlink" title="Sleep和wait的区别"></a>Sleep和wait的区别</h2><p>sleep和wait都可以暂停当前线程并让出CPU的执行时间，但是它们之间有一些区别。sleep不会释放当前持有的对象的锁资源，到时间后会继续执行；而wait会放弃所有锁并需要notify&#x2F;notifyAll后重新获取到对象锁资源后才能继续执行</p><p><a href="https://blog.csdn.net/qq_20009015/article/details/89980966">sleep和wait的区别_qq_20009015的博客-CSDN博客</a></p><br><h2 id="List-map-set区别"><a href="#List-map-set区别" class="headerlink" title="List map set区别"></a>List map set区别</h2><p>在Java中，List、Map和Set都是集合接口，它们之间的区别如下：</p><ul><li><p>List是一个有序的集合，可以有重复的元素，可以通过索引访问元素。常见的实现类有ArrayList、LinkedList等。</p></li><li><p>Set是一个不允许有重复元素的集合。常见的实现类有HashSet、TreeSet等。</p></li><li><p>Map是一种键值对映射表，每个键最多只能映射到一个值。常见的实现类有HashMap、TreeMap等。</p><p><a href="https://zhuanlan.zhihu.com/p/158763134">Java中List、Set、Map的区别 - 知乎 (zhihu.com)</a></p><br></li></ul><h2 id="Final的用法"><a href="#Final的用法" class="headerlink" title="Final的用法"></a>Final的用法</h2><p>在Java中，final关键字可以用来修饰类、方法和变量（包括成员变量和局部变量）。</p><ul><li><p>修饰类：当用final修饰一个类时，表明这个类不能被继承。</p></li><li><p>修饰变量：当用final修饰一个变量时，表明这个变量的值不能被改变。</p></li><li><p>修饰方法：当用final修饰一个方法时，表明这个方法不能被子类重写。</p><p><a href="https://blog.csdn.net/jklcc1/article/details/81153221">java中final的作用_final用途_八辞的博客-CSDN博客</a></p><br></li></ul><h2 id="启动线程的方法"><a href="#启动线程的方法" class="headerlink" title="启动线程的方法"></a>启动线程的方法</h2><p>在Java中，启动线程的方法有三种：</p><ol><li>继承Thread类创建线程类，重写run方法，然后调用start方法启动线程。</li><li>实现Runnable接口创建线程类，重写run方法，然后调用start方法启动线程。</li><li>使用Callable和Future创建线程。</li></ol><p><a href="https://zhuanlan.zhihu.com/p/439797698">面试官：Java 线程如何启动的？ - 知乎 (zhihu.com)</a></p><br><h2 id="并行和并发有什么区别"><a href="#并行和并发有什么区别" class="headerlink" title="并行和并发有什么区别?"></a>并行和并发有什么区别?</h2><p>并行是在多台处理器上同时处理多个任务。并发是在一台处理器上“同时”处理多个任务。</p><p><a href="https://www.jianshu.com/p/cbf9588b2afb">并发和并行的区别 - 简书 (jianshu.com)</a></p><br><h2 id="线程有哪些状态"><a href="#线程有哪些状态" class="headerlink" title="线程有哪些状态?"></a>线程有哪些状态?</h2><p>Java中线程的状态分为6种：</p><ol><li>初始(NEW)：新创建了一个线程对象，但还没有调用start()方法。</li><li>运行(RUNNABLE)：Java线程中将就绪（ready）和运行中（running）两种状态笼统的称为“运行”。</li><li>阻塞(BLOCKED)：表示线程阻塞于锁。</li><li>等待(WAITING)：进入该状态的线程需要等待其他线程做出一些特定动作（通知或中断）。</li><li>超时等待(TIMED_WAITING)：该状态不同于WAITING，它可以在指定的时间后自行返回。</li><li>终止(TERMINATED)：表示该线程已经执行完毕。</li></ol><p><a href="https://zhuanlan.zhihu.com/p/342060129">图解Java线程的6种状态及切换 - 知乎 (zhihu.com)</a></p><br><h2 id="线程池都有哪些状态"><a href="#线程池都有哪些状态" class="headerlink" title="线程池都有哪些状态?"></a>线程池都有哪些状态?</h2><p>线程池的状态有以下 5 种：</p><p>1.RUNNING：运行状态，线程池创建好之后就会进入此状态，如果不手动调用关闭方法，那么线程池在整个程序运行期间都是此状态。<br>2.SHUTDOWN：关闭状态，不再接受新任务提交，但是会将已保存在任务队列中的任务处理完。<br>3.STOP：停止状态，不再接受新任务提交，并且会中断当前正在执行的任务、放弃任务队列中已有的任务。<br>4.TIDYING：整理状态，所有的任务都执行完毕后（也包括任务队列中的任务执行完），当前线程池中的活动线程数降为 0 时的状态。到此状态之后，会调用线程池的 terminated() 方法。<br>5.TERMINATED：销毁状态，当执行完线程池的 terminated() 方法之后就会变为此状态。<br><a href="https://blog.csdn.net/qq_39221436/article/details/123704541">线程池有哪些状态？状态是如何转换的？_线程池的状态_CRMEB定制开发的博客-CSDN博客</a></p><br><h2 id="什么是死锁-怎么防止死锁"><a href="#什么是死锁-怎么防止死锁" class="headerlink" title="什么是死锁?怎么防止死锁?"></a>什么是死锁?怎么防止死锁?</h2><p>死锁是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力干涉那它们都将无法推进下去。</p><p>防止死锁的方法有以下几种：</p><ol><li><p>避免一个进程同时获取多个资源。</p></li><li><p>避免一个进程在请求资源时保持对原有资源的占有。</p></li><li><p>避免资源循环等待条件。</p><br></li></ol><h2 id="什么是Java序列化-什么情况下需要序列化"><a href="#什么是Java序列化-什么情况下需要序列化" class="headerlink" title="什么是Java序列化?什么情况下需要序列化?"></a>什么是Java序列化?什么情况下需要序列化?</h2><p>Java序列化是指将一个Java对象变为字节序列的过程，而反序列化则是将字节序列恢复为Java对象的过程。Java序列化可以用于网络传输和数据持久化。</p><p>需要序列化的情况有以下几种：</p><ol><li>当你想把的内存中的对象状态保存到一个文件中或者数据库中时候；</li><li>当你想用套接字在网络上传送对象的时候；</li><li>当你想通过RMI传输对象的时候；</li><li>当你想通过JMS发送消息时，消息体需要实现Serializable接口。</li></ol><br><h2 id="tcp为什么要三次握手，两次不行吗-为什么"><a href="#tcp为什么要三次握手，两次不行吗-为什么" class="headerlink" title="tcp为什么要三次握手，两次不行吗?为什么?"></a>tcp为什么要三次握手，两次不行吗?为什么?</h2><p>因为TCP协议是双向的，第三次握手是为了使得sever知道客户答应了连接的请求。其中两次握手只能确定<strong>从客户端到服务端的网络是可达的</strong>，但却<strong>无法保证从服务端到客户端的网络是可达的</strong>。所以我们一定要保证双向的可达。</p><p><a href="https://blog.csdn.net/qq_44608327/article/details/123130567">TCP 两次握手为什么不行_tcp两次握手为什么不可以_xiaoni61的博客-CSDN博客</a></p><br><h2 id="说一下你熟悉的设计模式"><a href="#说一下你熟悉的设计模式" class="headerlink" title="说一下你熟悉的设计模式?"></a>说一下你熟悉的设计模式?</h2><p>代理模式是常用的java设计模式，他的特征是代理类与委托类有同样的接口，代理类主要负责为委托类预处理消息、过滤消息、把消息转发给委托类，以及事后处理消息等。代理类与委托类之间通常会存在关联关系，一个代理类的对象与一个委托类的对象关联，代理类的对象本身并不真正实现服务，而是通过调用委托类的对象的相关方法，来提供特定的服务。简单的说就是，我们在访问实际对象时，是通过代理对象来访问的，代理模式就是在访问实际对象时引入一定程度的间接性，因为这种间接性，可以附加多种用途。</p><br><h2 id="spring-支持几种bean的作用域"><a href="#spring-支持几种bean的作用域" class="headerlink" title="spring 支持几种bean的作用域?"></a>spring 支持几种bean的作用域?</h2><p>Spring支持以下5种作用域：</p><ol><li><p>singleton：单例模式，一个BeanFactory中只有一个实例；</p></li><li><p>prototype：原型模式，每次请求都会创建一个新的实例；</p></li><li><p>request：每次HTTP请求都会创建一个新的实例；</p></li><li><p>session：每个HTTP Session都会创建一个新的实例；</p></li><li><p>global-session：全局HTTP Session共享一个实例。</p><br></li></ol><h2 id="spring-boot有哪些方式可以实现热部署"><a href="#spring-boot有哪些方式可以实现热部署" class="headerlink" title="spring boot有哪些方式可以实现热部署?"></a>spring boot有哪些方式可以实现热部署?</h2><p>Spring Boot支持两种热部署方式：使用spring-boot-devtools插件和使用springloaded。其中，spring-boot-devtools插件是Spring Boot提供的一种工具，可以实现自动重启应用程序，而不需要手动重启。使用springloaded则需要在pom.xml文件中配置依赖，然后使用mvn spring-boot:run启动。</p><p><a href="https://blog.csdn.net/chachapaofan/article/details/88697452">springboot实现热部署_springboot热部署_米奇罗的博客-CSDN博客</a></p><br><h2 id="springcloud的核心组件有哪些"><a href="#springcloud的核心组件有哪些" class="headerlink" title="springcloud的核心组件有哪些?"></a>springcloud的核心组件有哪些?</h2><p>Spring Cloud的核心组件包括：服务发现、服务消费、负载均衡、断路器、分布式配置中心、消息总线、API网关等。</p><br><h2 id="MyBatis延迟加载的原理是什么"><a href="#MyBatis延迟加载的原理是什么" class="headerlink" title="MyBatis延迟加载的原理是什么?"></a>MyBatis延迟加载的原理是什么?</h2><p>MyBatis的延迟加载是指在需要用到数据的时候进行加载，不需要用到数据就不进行加载。MyBatis中有两个设置项和延迟加载有关：lazyLoadingEnable和agressiveLazyLoading。前者可开启延迟加载，后者设为false则是按需加载，两者配合使用。MyBatis中的ResultMap关系映射中有两个标签：association和collection，前者适合一对一查询的关系映射，后者适合一对多查询的关系映射。</p><p><a href="https://blog.csdn.net/WSheng_Pyhon/article/details/113527471">MyBatis实现延迟加载的基本原理_mybatis延迟加载原理_白王_的博客-CSDN博客</a></p><br><h2 id="RabbitMQ-有哪些重要的组件"><a href="#RabbitMQ-有哪些重要的组件" class="headerlink" title="RabbitMQ 有哪些重要的组件?"></a>RabbitMQ 有哪些重要的组件?</h2><p>RabbitMQ的核心组件包括：ConnectionFactory（连接管理器）、Channel（信道）、Exchange（交换器）、Queue（队列）和RoutingKey（路由键）</p><p><a href="https://www.cnblogs.com/jxxblogs/p/12259901.html">rabbitmq有哪些重要角色和组件？ - 莫等、闲 - 博客园 (cnblogs.com)</a></p><br><h2 id="RabbitMQ有几种广播类型"><a href="#RabbitMQ有几种广播类型" class="headerlink" title="RabbitMQ有几种广播类型?"></a>RabbitMQ有几种广播类型?</h2><p>RabbitMQ有三种广播模式：fanout、direct和topic。</p><br><h2 id="MySQL索引是怎么实现的"><a href="#MySQL索引是怎么实现的" class="headerlink" title="MySQL索引是怎么实现的?"></a>MySQL索引是怎么实现的?</h2><p>MySQL的索引是通过B+树实现的。</p><p><a href="https://blog.csdn.net/weixin_41507324/article/details/104585343">mysql索引的实现和原理_mysql的索引是怎么实现的_蚂蚁雅嘿的博客-CSDN博客</a></p><br><h2 id="怎么保证缓存和数据库数据一致性？"><a href="#怎么保证缓存和数据库数据一致性？" class="headerlink" title="怎么保证缓存和数据库数据一致性？"></a>怎么保证缓存和数据库数据一致性？</h2><p>保证数据库和缓存数据最终一致性的常用方案如下： </p><p>1）更新数据库，数据库产生 binlog。 </p><p>2）监听和消费 binlog，执行失效缓存操作。 </p><p>由于数据库和缓存是两个不同的数据源，要保证其数据一致性，其实就是典型的分布式事务场景，可以引入分布式事务来解决，常见的有：2PC、TCC、MQ事务消息等。</p><p><a href="https://blog.csdn.net/v123411739/article/details/114803998">面试必问的缓存使用：如何保证数据一致性、缓存设计模式_程序员囧辉的博客-CSDN博客</a></p><br><h2 id="Redis持久化有几种方式？"><a href="#Redis持久化有几种方式？" class="headerlink" title="Redis持久化有几种方式？"></a>Redis持久化有几种方式？</h2><p>Redis 提供了两种持久化方式，一种是基于快照形式的 RDB，另一种是基于日志形式的 AOF，每种方式都有自己的优缺点。</p><p><a href="https://zhuanlan.zhihu.com/p/142544517">Redis 的持久化方式及其原理，看这一篇就够了 - 知乎 (zhihu.com)</a></p><br>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>imageTest</title>
      <link href="/archives/99833c88.html"/>
      <url>/archives/99833c88.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://image-1317998081.cos.ap-chengdu.myqcloud.com/image/202305292042102.jpg"><br><img src="https://image-1317998081.cos.ap-chengdu.myqcloud.com/image/202305292042631.png"><br><img src="https://image-1317998081.cos.ap-chengdu.myqcloud.com/image/202305292042606.jpg"><br><img src="https://image-1317998081.cos.ap-chengdu.myqcloud.com/image/202305292042741.png"><br><img src="https://image-1317998081.cos.ap-chengdu.myqcloud.com/image/202305292042183.jpeg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7中mysql主从复制相关问题</title>
      <link href="/archives/d99528e5.html"/>
      <url>/archives/d99528e5.html</url>
      
        <content type="html"><![CDATA[<p><strong><em>mysql主从复制相关问题</em></strong></p><h2 id="克隆后网络UUID和ip相同"><a href="#克隆后网络UUID和ip相同" class="headerlink" title="克隆后网络UUID和ip相同"></a>克隆后网络UUID和ip相同</h2><br><p>查看主从服务器UUID和ip是否相同，相同需要修改<br><br><br><br><strong>解决方法</strong></p><h3 id="修改IP"><a href="#修改IP" class="headerlink" title="修改IP"></a>修改IP</h3><p>查看IP信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure><p><img src="https://image-1317998081.cos.ap-chengdu.myqcloud.com/image/202305292123737.png" alt="image-20230427114430611"><br>这里是ens33，所以修改文件 ifcfg-ens33<br><br></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure><p><img src="https://image-1317998081.cos.ap-chengdu.myqcloud.com/image/202305292123766.png" alt="image-20230427114716667"><br>修改这里的ip地址<br><br><br><br>保存退出，重启网络</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure><p><br><br></p><h3 id="修改UUID"><a href="#修改UUID" class="headerlink" title="修改UUID"></a>修改UUID</h3><p>查看UUID</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmcli con show</span><br></pre></td></tr></table></figure><br><p>生成一个UUID</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> UUID();  </span><br></pre></td></tr></table></figure><br><p>到此路径下修改UUID</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /var/lib/mysql/auto.cnf</span><br></pre></td></tr></table></figure><p><img src="https://image-1317998081.cos.ap-chengdu.myqcloud.com/image/202305292120676.png"><br><br><br>重启mysql服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="主从服务器之间网络连接不正常"><a href="#主从服务器之间网络连接不正常" class="headerlink" title="主从服务器之间网络连接不正常"></a>主从服务器之间网络连接不正常</h2><br><p>测试链接是否正常（需安装telnet）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install telnet</span><br></pre></td></tr></table></figure><br><p>填入你要连接的ip 端口</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">telnet 192.168.78.128 3306</span><br></pre></td></tr></table></figure><p>出现 “Connected”说明连接成功<br><br><br><br><strong>解决方法</strong></p><p>去主服务器关闭防火墙或开放端口<br><img src="https://image-1317998081.cos.ap-chengdu.myqcloud.com/image/202305292120046.png" alt="防火墙相关操作"><br><br><br><br>重启网络</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="授权问题"><a href="#授权问题" class="headerlink" title="授权问题"></a>授权问题</h2><br>使用 MySQL 客户端命令测试主从服务器之间的 MySQL 用户授权情况<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -h 192.168.78.128 -u uzero -p root</span><br></pre></td></tr></table></figure><br><p>如果在使用以上命令时出现 “Access denied” 的错误，说明该用户没有被正确授权或密码错误<br><br><br></p><p><strong>解决方法</strong></p><h3 id="密码问题"><a href="#密码问题" class="headerlink" title="密码问题"></a>密码问题</h3><p>在主服务器修改用户密码（指修改实现主从复制而主服务器创建的新用户并非root）</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;uzero&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;root&#x27;</span>;</span><br></pre></td></tr></table></figure><br><p>修改密码可能出现密码不符合规则<br><br></p><p>查看密码当前规则</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;validate_password%&#x27;</span>;</span><br></pre></td></tr></table></figure><br>修改密码策略等级<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password.policy<span class="operator">=</span>LOW;</span><br></pre></td></tr></table></figure><br>设置是否校验<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password.check_user_name<span class="operator">=</span>off;</span><br></pre></td></tr></table></figure><br>设置长度至少为1<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password.length<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><br><br></p><h3 id="授权问题-1"><a href="#授权问题-1" class="headerlink" title="授权问题"></a>授权问题</h3><p><strong>主库给予用户授权</strong><br><br><br>创建用户</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;uzero&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;root&#x27;</span>;</span><br></pre></td></tr></table></figure><br>给与授权<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> REPLICATION SLAVE <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;uzero&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br></pre></td></tr></table></figure><br>**从库执行sql**<p>停止之前的 slave</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">STOP SLAVE;</span><br></pre></td></tr></table></figure><br>清除之前的 slave信息<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">RESET SLAVE;</span><br></pre></td></tr></table></figure><br>配置<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">CHANGE MASTER <span class="keyword">TO</span> MASTER_HOST<span class="operator">=</span><span class="string">&#x27;主服务器IP地址&#x27;</span>, MASTER_USER<span class="operator">=</span><span class="string">&#x27;用户名&#x27;</span>, MASTER_PASSWORD<span class="operator">=</span><span class="string">&#x27;密码&#x27;</span>, MASTER_LOG_FILE<span class="operator">=</span><span class="string">&#x27;mysql-bin.XXXXXX&#x27;</span>, MASTER_LOG_POS<span class="operator">=</span>XXX;</span><br></pre></td></tr></table></figure><br>启动<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">START</span> SLAVE;</span><br></pre></td></tr></table></figure><br>查看状态<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> SLAVE STATUS\G;</span><br></pre></td></tr></table></figure><br>确认 Slave_IO_Running 和 Slave_SQL_Running 字段的值都为 Yes]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> mysql </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客文章</title>
      <link href="/archives/b24dd347.html"/>
      <url>/archives/b24dd347.html</url>
      
        <content type="html"><![CDATA[<p><strong><em>基于hexo创建博客</em></strong></p><p>安装Nodejs</p><p><a href="https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a></p><p>#查看node版本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><h1 id="查看npm版本"><a href="#查看npm版本" class="headerlink" title="查看npm版本"></a>查看npm版本</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure><h1 id="安装淘宝的cnpm-管理器"><a href="#安装淘宝的cnpm-管理器" class="headerlink" title="安装淘宝的cnpm 管理器"></a>安装淘宝的cnpm 管理器</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h1 id="查看cnpm版本"><a href="#查看cnpm版本" class="headerlink" title="查看cnpm版本"></a>查看cnpm版本</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm -v</span><br></pre></td></tr></table></figure><h1 id="安装hexo框架"><a href="#安装hexo框架" class="headerlink" title="安装hexo框架"></a>安装hexo框架</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><h1 id="查看hexo版本"><a href="#查看hexo版本" class="headerlink" title="查看hexo版本"></a>查看hexo版本</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><h1 id="创建blog目录"><a href="#创建blog目录" class="headerlink" title="创建blog目录"></a>创建blog目录</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir blog</span><br></pre></td></tr></table></figure><h1 id="进入blog目录"><a href="#进入blog目录" class="headerlink" title="进入blog目录"></a>进入blog目录</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd blog</span><br></pre></td></tr></table></figure><h1 id="生成博客-初始化博客"><a href="#生成博客-初始化博客" class="headerlink" title="生成博客 初始化博客"></a>生成博客 初始化博客</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><h1 id="启动本地博客服务"><a href="#启动本地博客服务" class="headerlink" title="启动本地博客服务"></a>启动本地博客服务</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><h1 id="本地访问地址"><a href="#本地访问地址" class="headerlink" title="本地访问地址"></a>本地访问地址</h1><p><a href="http://localhost:4000/">http://localhost:4000/</a></p><h1 id="创建新的文章"><a href="#创建新的文章" class="headerlink" title="创建新的文章"></a>创建新的文章</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n &quot;我的第一篇文章&quot;</span><br></pre></td></tr></table></figure><h1 id="返回blog目录"><a href="#返回blog目录" class="headerlink" title="返回blog目录"></a>返回blog目录</h1><h1 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean </span><br></pre></td></tr></table></figure><h1 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
